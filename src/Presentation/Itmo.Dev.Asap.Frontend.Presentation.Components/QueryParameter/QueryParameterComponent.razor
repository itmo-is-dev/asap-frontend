@using Itmo.Dev.Asap.Frontend.Presentation.Components.QueryParameter
@namespace Itmo.Dev.Asap.Frontend.Presentation.Components
@typeparam T

<MudStack
    Row="true"
    Style="width: fit-content"
    AlignItems="AlignItems.Center"
    Justify="Justify.FlexStart">

    <MudText Typo="Typo.body2">
        @Label
    </MudText>

    <div style="@($"width: {PreviewWidth}; white-space: nowrap; overflow: hidden; text-overflow: ellipsis")">
        @Preview
    </div>

    <MudChip
        Color="Color.Default"
        Variant="Variant.Outlined"
        Size="Size.Small"
        Class="disable-hover">

        @_values.Count

    </MudChip>

    <MudIconButton Icon="@ArrowIcon" OnClick="@(() => _listOpen = !_listOpen)"/>

    <MudPopover
        Open="_listOpen"
        AnchorOrigin="Origin.BottomRight"
        TransformOrigin="Origin.TopRight"
        RelativeWidth="true">

        <QueryParameterValuesComponent
            Width="@PreviewWidth"
            Values="_values"
            OnValuesChanged="StateHasChanged"
            Validator="ValidateInput"
            Parser="ParseInput"
            ValueToString="ConvertToString"/>

    </MudPopover>

    <MudOverlay
        Visible="_listOpen"
        OnClick="@(() => _listOpen = false)"
        LockScroll="true"/>

</MudStack>

@code {

    private readonly List<QueryValue<T>> _values = new List<QueryValue<T>>();

    private bool _listOpen;

    private string Preview => string.Join(", ", _values.Select(v => ConvertToString(v.Value)));

    private string ArrowIcon => _listOpen
        ? Icons.Material.Filled.KeyboardArrowDown
        : Icons.Material.Filled.KeyboardArrowLeft;

    [Parameter]
    public string? Label { get; set; }

    [Parameter]
    public string? PreviewWidth { get; set; }

    public IEnumerable<T> Values => _values.Select(x => x.Value);

    protected virtual bool ValidateInput(string input) => false;

    protected virtual T ParseInput(string input) => default!;

    protected virtual string ConvertToString(T value) => string.Empty;

}