@using Microsoft.JSInterop
@typeparam T
@inject IJSRuntime Js

@if (Values is not null)
{
    <MudList Class="disable-clickable disable-ripple">

        <MudListItem>
            <MudTextField
                @ref="_input"
                AutoFocus="true"
                T="string"
                Variant="Variant.Outlined"
                Clearable="true"
                Immediate="true"
                OnKeyDown="@OnKeyDownAsync"
                Validation="@Validator"/>
        </MudListItem>

        @foreach (var value in Values)
        {
            <MudListItem>
                <MudStack
                    Row="true"
                    Justify="Justify.SpaceBetween"
                    AlignItems="AlignItems.Center">
                    
                    @{
                        var str = ValueToString?.Invoke(value.Value) ?? value.Value?.ToString() ?? string.Empty;
                    }

                    <div
                        style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                        title="@str">

                        @str

                    </div>

                    <div @onclick:stopPropagation="true">
                        <MudIconButton
                            Icon="@Icons.Material.Filled.Close"
                            OnClick="@(() => OnValueRemoved(value))"/>
                    </div>

                </MudStack>
            </MudListItem>
        }

    </MudList>
}

@code {
    private MudTextField<string>? _input;

    [Parameter]
    public string? Width { get; set; }

    [Parameter]
    public ICollection<QueryValue<T>>? Values { get; set; }

    [Parameter]
    public EventCallback OnValuesChanged { get; set; }

    [Parameter]
    public Func<string, bool>? Validator { get; set; }

    [Parameter]
    public Func<string, T>? Parser { get; set; }
    
    [Parameter]
    public Func<T, string>? ValueToString { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await Js.InvokeVoidAsync(
            "removeClass",
            ".mud-list.disable-clickable > .mud-list-item-clickable",
            "mud-list-item-clickable");

        await Js.InvokeVoidAsync(
            "removeClass",
            ".mud-list.disable-ripple > .mud-ripple",
            "mud-ripple");
    }

    private async Task OnKeyDownAsync(KeyboardEventArgs arg)
    {
        if (Validator is null || Parser is null)
            return;

        if (_input is not null && arg.Key.Equals("enter", StringComparison.OrdinalIgnoreCase))
        {
            if (Validator.Invoke(_input.Value) is false)
                return;

            var value = Parser.Invoke(_input.Value);

            Values?.Add(new QueryValue<T>(value));
            await _input.Clear();

            await OnValuesChanged.InvokeAsync();
        }
    }

    private async Task OnValueRemoved(QueryValue<T> value)
    {
        Values?.Remove(value);
        await OnValuesChanged.InvokeAsync();
    }

}