@using Itmo.Dev.Asap.Frontend.Application.Abstractions.StudentGroups
@using Itmo.Dev.Asap.Frontend.Application.Abstractions.StudentGroups.Models
@using Itmo.Dev.Asap.Frontend.Application.Abstractions.SubjectCourseGroups
@using Itmo.Dev.Asap.Frontend.Application.Abstractions.SubjectCourseGroups.Models
@using Itmo.Dev.Asap.Frontend.Presentation.Markup.StudentGroups.Models
@using Itmo.Dev.Asap.Frontend.Presentation.Markup.StudentGroups.Components
@inject ISubjectCourseGroupService SubjectCourseGroupService

<MudStack
    Row="false"
    Justify="Justify.SpaceBetween"
    AlignItems="AlignItems.Center"
    Style="flex-grow: 1; overflow: hidden">

    <SelectStudentGroupComponent
        ExcludedSubjectCourseId="SubjectCourseId"
        SelectedStudentGroups="_selectedStudentGroups"
        OnSelectedGroupsChanged="StateHasChanged"/>

    <MudStack Row="true" Justify="Justify.FlexEnd" Style="width: 100%">
        <MudButton
            Variant="Variant.Outlined"
            Disabled="@(!AddGroupsButtonEnabled)"
            OnClick="@OnAddGroupsClickAsync">

            Add groups

        </MudButton>
    </MudStack>

</MudStack>

@code {

    private readonly ICollection<IStudentGroup> _selectedStudentGroups = new List<IStudentGroup>();

    private bool AddGroupsButtonEnabled => _selectedStudentGroups.Any();

    [Parameter]
    public Guid SubjectCourseId { get; set; }

    [Parameter]
    public EventCallback OnSuccess { get; set; }

    protected override void OnParametersSet()
    {
        _selectedStudentGroups.Clear();
    }

    private async Task OnAddGroupsClickAsync()
    {
        IEnumerable<Guid> groupIds = _selectedStudentGroups
            .Select(x => x.Id);

        var result = await SubjectCourseGroupService.CreateAsync(SubjectCourseId, groupIds, default);

        if (result is CreateSubjectCourseGroupResult.Success)
            await OnSuccess.InvokeAsync();
    }

}