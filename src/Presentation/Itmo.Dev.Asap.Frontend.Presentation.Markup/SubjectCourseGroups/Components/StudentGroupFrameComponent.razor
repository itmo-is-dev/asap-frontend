@using Itmo.Dev.Asap.Frontend.Application.Abstractions.StudentGroups
@using Itmo.Dev.Asap.Frontend.Presentation.Markup.SubjectCourseGroups.Models

@if (Frame is not null)
{
    @if (Frame.StudentGroup is null)
    {
        <MudStack
            Row="true"
            Justify="Justify.SpaceBetween"
            AlignItems="AlignItems.Center">

            <MudAutocomplete
                T="IStudentGroup"
                SearchFuncWithCancel="SearchFunc"
                ValueChanged="OnValueChangedAsync"
                DebounceInterval="1000"
                Clearable="true"
                ShowProgressIndicator="true">

                <ItemTemplate Context="item">
                    <PhazorReactiveText Value="item.Name"/>
                </ItemTemplate>

            </MudAutocomplete>

            <MudIconButton
                Icon="@Icons.Material.Outlined.Delete"
                OnClick="@(() => OnFrameRemoved.InvokeAsync(Frame))"/>

        </MudStack>
    }
    else
    {
        <MudStack
            Row="true"
            Justify="Justify.SpaceBetween"
            AlignItems="AlignItems.Center">

            <MudText Typo="Typo.body2">
                <PhazorReactiveText Value="Frame.StudentGroup.Name"/>
            </MudText>

            <MudIconButton
                Icon="@Icons.Material.Outlined.Delete"
                OnClick="@(() => OnFrameRemoved.InvokeAsync(Frame))"/>

        </MudStack>
    }
}

@code {

    [Parameter]
    public StudentGroupFrame? Frame { get; set; }

    [Parameter]
    public EventCallback<StudentGroupFrame> OnFrameRemoved { get; set; }

    [Parameter]
    public EventCallback StateChanged { get; set; }

    [Parameter]
    public Func<string, CancellationToken, Task<IEnumerable<IStudentGroup>>>? SearchFunc { get; set; }

    private async Task OnValueChangedAsync(IStudentGroup value)
    {
        if (Frame is null)
            return;

        Frame.StudentGroup = value;
        await StateChanged.InvokeAsync();
    }

}