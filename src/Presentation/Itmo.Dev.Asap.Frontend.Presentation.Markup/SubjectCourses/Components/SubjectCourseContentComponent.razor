@using Itmo.Dev.Asap.Frontend.Application.Abstractions.SubjectCourses
@using Itmo.Dev.Asap.Frontend.Application.Abstractions.SubjectCourses.Associations
@using System.Reactive.Linq
@using Itmo.Dev.Asap.Frontend.Application.Abstractions.SubjectCourses.Extensions
@using Itmo.Dev.Asap.Frontend.Presentation.Components.Display
@using Itmo.Dev.Asap.Frontend.Presentation.Markup.SubjectCourses.Components.Tabs
@using Itmo.Dev.Asap.Frontend.Presentation.Markup.SubjectCourses.Components.Associations
@using Itmo.Dev.Asap.Frontend.Presentation.Markup.Subjects.Components
@using Itmo.Dev.Asap.Frontend.Presentation.Markup.Assignments.Components
@using Itmo.Dev.Asap.Frontend.Presentation.Markup.SubjectCourseGroups.Components
@using Itmo.Dev.Asap.Frontend.Presentation.Markup.Queues.Components
@using Itmo.Dev.Asap.Frontend.Presentation.Markup.Checking.Components
@using Itmo.Dev.Asap.Frontend.Presentation.Markup.SubjectCourses.Models


@if (SubjectCourse is not null)
{
    <MudTabs
        Elevation="2"
        Rounded="true"
        ApplyEffectsToContainer="true"
        PanelClass="pa-6"
        ActivePanelIndex="@TabIndex"
        ActivePanelIndexChanged="@OnActivePanelIndexChangedChanged"
        Style="overflow-y: scroll">

        <MudTabPanel>
            <TabContent>
                <AssignmentsTabComponent SubjectCourseId="SubjectCourse.Id"/>
            </TabContent>
            <ChildContent>
                <AssignmentListComponent SubjectCourseId="SubjectCourse.Id" Display="Display"/>
            </ChildContent>
        </MudTabPanel>

        <MudTabPanel>
            <TabContent>
                <GroupsTabComponent SubjectCourseId="SubjectCourse.Id"/>
            </TabContent>
            <ChildContent>
                <SubjectCourseGroupListComponent SubjectCourseId="SubjectCourse.Id"/>
            </ChildContent>
        </MudTabPanel>

        <MudTabPanel>
            <TabContent>
                <QueuesTabComponent/>
            </TabContent>
            <ChildContent>
                <QueueListComponent SubjectCourseId="SubjectCourse.Id" Display="Display"/>
            </ChildContent>
        </MudTabPanel>

        <MudTabPanel>
            <TabContent>
                <CheckingTabComponent/>
            </TabContent>
            <ChildContent>
                <CheckingListComponent SubjectCourseId="SubjectCourse.Id" Display="Display"/>
            </ChildContent>
        </MudTabPanel>

    </MudTabs>
}
else
{
    <MudSkeleton
        Width="100%"
        Height="200px"
        Animation="Animation.Wave"/>
}

@code {

    private int TabIndex => SelectedTab switch
    {
        SubjectCourseContentTab.Assignments => 0,
        SubjectCourseContentTab.Groups => 1,
        SubjectCourseContentTab.Queues => 2,
        SubjectCourseContentTab.Checking => 3,
        _ => -1,
    };

    [Parameter]
    public ISubjectCourse? SubjectCourse { get; set; }

    [Parameter]
    public IDisplayContentConsumer? Display { get; set; }

    [Parameter]
    public SubjectCourseContentTab SelectedTab { get; set; }

    [Parameter]
    public EventCallback<SubjectCourseContentTab> SelectedTabChanged { get; set; }

    private async Task OnActivePanelIndexChangedChanged(int index)
    {
        SelectedTab = index switch
        {
            0 => SubjectCourseContentTab.Assignments,
            1 => SubjectCourseContentTab.Groups,
            2 => SubjectCourseContentTab.Queues,
            3 => SubjectCourseContentTab.Checking,
            _ => SubjectCourseContentTab.Assignments,
        };

        await SelectedTabChanged.InvokeAsync(SelectedTab);
    }

}