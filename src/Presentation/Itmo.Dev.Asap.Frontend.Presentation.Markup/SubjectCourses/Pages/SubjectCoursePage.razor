@page "/courses/{subjectCourseId:guid}"
@using Itmo.Dev.Asap.Frontend.Presentation.Markup.SubjectCourses.Components
@using Itmo.Dev.Asap.Frontend.Application.Abstractions.SubjectCourses
@using Itmo.Dev.Asap.Frontend.Presentation.Components.Display
@using Itmo.Dev.Asap.Frontend.Presentation.Markup.SubjectCourses.Models
@inject ISubjectCourseProvider SubjectCourseProvider
@inject NavigationManager NavigationManager

<MudStack Style="height: 100%">

    <SubjectCourseBreadcrumbComponent SubjectCourse="_subjectCourse"/>

    <SubjectCourseInfoComponent SubjectCourse="_subjectCourse"/>

    <MudStack Row="true" Style="flex-grow: 1; min-height: 0">

        <SubjectCourseContentComponent
            SubjectCourse="_subjectCourse"
            Display="_displayController"
            SelectedTab="TabEnum"
            SelectedTabChanged="@OnSelectedTabChanged"/>

        <DisplayComponent
            Provider="_displayController">

            <NoContent>
                <div style="width: 100%; height: 100%"></div>
            </NoContent>

        </DisplayComponent>

    </MudStack>

</MudStack>


@code {

    private readonly DisplayContentController _displayController = new DisplayContentController();

    private ISubjectCourse? _subjectCourse;

    private SubjectCourseContentTab TabEnum => Map(Tab);

    [Parameter]
    public Guid SubjectCourseId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "tab")]
    public string? Tab { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (SubjectCourseId.Equals(default))
            return;

        _subjectCourse = await SubjectCourseProvider.LoadAsync(SubjectCourseId, default);
    }

    private void OnSelectedTabChanged(SubjectCourseContentTab tab)
    {
        Tab = Map(tab);
        NavigationManager.NavigateTo(NavigationManager.GetUriWithQueryParameter("tab", Tab));
    }

    private static string Map(SubjectCourseContentTab tab)
    {
        return tab switch
        {
            SubjectCourseContentTab.Assignments => "assignments",
            SubjectCourseContentTab.Groups => "groups",
            SubjectCourseContentTab.Queues => "queues",
            SubjectCourseContentTab.Checking => "checkings",
            _ => throw new ArgumentOutOfRangeException(nameof(tab), tab, null)
        };
    }

    private static SubjectCourseContentTab Map(string? tab)
    {
        return tab switch
        {
            "assignments" => SubjectCourseContentTab.Assignments,
            "groups" => SubjectCourseContentTab.Groups,
            "queues" => SubjectCourseContentTab.Queues,
            "checkings" => SubjectCourseContentTab.Checking,
            _ => SubjectCourseContentTab.Assignments,
        };
    }

}