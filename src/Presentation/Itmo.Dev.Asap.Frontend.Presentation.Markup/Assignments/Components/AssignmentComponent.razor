@using Itmo.Dev.Asap.Frontend.Application.Abstractions.Assignments
@using Itmo.Dev.Asap.Frontend.Application.Abstractions.Assignments.Models
@using Itmo.Dev.Asap.Frontend.Presentation.Markup.GroupAssignments.Components

@inject IDialogService DialogService

@if (Assignment is not null)
{
    <MudStack>

        <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">

            <MudText Typo="Typo.h4">
                <PhazorReactiveText Value="Assignment.Name"/>
            </MudText>

            <MudMenu Icon="@Icons.Material.Filled.MoreVert">

                <PhazorReactiveValue Value="Assignment.SubjectCourseId" Context="subjectCourseId">
                    <MudMenuItem OnClick="@(() => OnUpdateBulkDeadlinesClicked(subjectCourseId))">
                        Bulk update deadlines
                    </MudMenuItem>
                </PhazorReactiveValue>

            </MudMenu>

        </MudStack>

        <AssignmentPointsComponent Assignment="Assignment"/>

        <GroupAssignmentListComponent AssignmentId="Assignment.Id"/>

    </MudStack>
}

@code {

    private static readonly DialogOptions MoreActionsDialogOptions = new DialogOptions
    {
        CloseButton = true,
        CloseOnEscapeKey = true,
        FullScreen = false,
        MaxWidth = MaxWidth.Large,
    };

    [Parameter]
    public IAssignment? Assignment { get; set; }

    private async Task OnUpdateBulkDeadlinesClicked(Guid subjectCourseId)
    {
        const string contentStyle = "min-width: 800px; max-width: 1000px; min-height: 500px; max-height: 500px; display: flex";

        if (Assignment is null)
            return;

        var tcs = new TaskCompletionSource();

        await DialogService.ShowTemplatedWithClosingAsync(
            MoreActionsDialogOptions,
            tcs.Task,
            contentStyle: contentStyle,
            fragment: @<BulkUpdateDeadlinesComponent SubjectCourseId="subjectCourseId" AssignmentId="Assignment.Id" OnSuccess="@(() => tcs.SetResult())"/>);
    }

}