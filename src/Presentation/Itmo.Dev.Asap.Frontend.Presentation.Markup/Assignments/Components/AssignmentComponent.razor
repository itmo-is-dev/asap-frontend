@using Itmo.Dev.Asap.Frontend.Application.Abstractions.Assignments
@using Itmo.Dev.Asap.Frontend.Application.Abstractions.Assignments.Models
@using Itmo.Dev.Asap.Frontend.Presentation.Markup.GroupAssignments.Components

@inject IAssignmentService AssignmentService
@inject IDialogService DialogService

@if (Assignment is not null)
{
    <MudStack Row="true" AlignItems="AlignItems.Center">

        <MudText Typo="Typo.h4">
            <PhazorReactiveText Value="Assignment.Name"/>
        </MudText>

        <MudMenu Icon="@Icons.Material.Filled.MoreVert">

            <PhazorReactiveValue Value="Assignment.SubjectCourseId" Context="subjectCourseId">
                <MudMenuItem OnClick="@(() => OnUpdateBulkDeadlinesClicked(subjectCourseId))">
                    Bulk update deadlines
                </MudMenuItem>
            </PhazorReactiveValue>

        </MudMenu>

    </MudStack>

    <MudSimpleTable
        Elevation="0"
        Outlined="false"
        Dense="true"
        Style="width: fit-content;">

        <tbody>

        <tr>
            <td style="border-bottom: none">
                Min points:
            </td>

            <td style="border-bottom: none">
                <PhazorBinding T="bool" ReplaySize="1" Context="editing">
                    <EditableNumericComponent
                        T="double"
                        IsEditing="editing"
                        Value="Assignment.MinPoints"
                        OnValueSubmitted="@(async v => editing.OnNext(await OnMinPointsSubmitted(v)))"/>
                </PhazorBinding>
            </td>
        </tr>

        <tr>

            <td>Max points:</td>

            <td>
                <PhazorBinding T="bool" ReplaySize="1" Context="editing">
                    <EditableNumericComponent
                        T="double"
                        IsEditing="editing"
                        Value="Assignment.MaxPoints"
                        OnValueSubmitted="@(async v => editing.OnNext(await OnMaxPointsSubmitted(v)))"/>
                </PhazorBinding>
            </td>

        </tr>

        </tbody>

    </MudSimpleTable>

    <GroupAssignmentListComponent AssignmentId="Assignment.Id"/>
}

<MudSpacer/>

@code {

    private static readonly DialogOptions MoreActionsDialogOptions = new DialogOptions
    {
        CloseButton = true,
        CloseOnEscapeKey = true,
        FullScreen = false,
        MaxWidth = MaxWidth.Large,
    };

    [Parameter]
    public IAssignment? Assignment { get; set; }

    // Returns IsEditing state
    private async ValueTask<bool> OnMinPointsSubmitted(double value)
    {
        if (Assignment is null)
            return false;

        var result = await AssignmentService.UpdateMinPointsAsync(Assignment.Id, value, default);

        return result is not UpdateMinPointsResult.Success;
    }

    // Returns IsEditing state
    private async ValueTask<bool> OnMaxPointsSubmitted(double value)
    {
        if (Assignment is null)
            return false;

        var result = await AssignmentService.UpdateMaxPointsAsync(Assignment.Id, value, default);

        return result is not UpdateMaxPointsResult.Success;
    }

    private async Task OnUpdateBulkDeadlinesClicked(Guid subjectCourseId)
    {
        const string contentStyle = "min-width: 800px; max-width: 1000px; min-height: 500px; max-height: 500px; display: flex";

        if (Assignment is null)
            return;

        var tcs = new TaskCompletionSource();

        await DialogService.ShowTemplatedWithClosingAsync(
            MoreActionsDialogOptions,
            tcs.Task,
            contentStyle: contentStyle,
            fragment: @<BulkUpdateDeadlinesComponent SubjectCourseId="subjectCourseId" AssignmentId="Assignment.Id" OnSuccess="@(() => tcs.SetResult())"/>);
    }

}